<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mach core: a modern alternative to SDL/etc on Mach engine - game engine &amp; graphics toolkit for the future</title><link>https://machengine.org/next/docs/core/</link><description>Recent content in Mach core: a modern alternative to SDL/etc on Mach engine - game engine &amp; graphics toolkit for the future</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://machengine.org/next/docs/core/index.xml" rel="self" type="application/rss+xml"/><item><title>Examples - Mach core</title><link>https://machengine.org/next/docs/core/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/docs/core/examples/</guid><description>.p-section { display: flex; flex-direction: row; margin-top: 3rem; align-items: center; justify-content: center; } .p-section-highlight { margin-top: 4rem; margin-bottom: 2rem; } .p-section-right { margin-left: 2rem; } .p-section-left { margin-right: 2rem; } .p-img-left { height: 10rem; margin-left: 4.5rem; } .p-img-right { height: 10rem; margin-right: 4.5rem; } .p-logo { margin-right: 3rem; margin-top: 2rem; } .p-logoimg { height: 10rem; width: 100%; } h2 { text-align: left; margin-top: 0; } @media (max-width:700px) { .p-warning { margin-top: 0; } .</description></item><item><title>Getting started - Mach core</title><link>https://machengine.org/next/docs/core/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/docs/core/getting-started/</guid><description>Getting Started with Mach core If you haven&amp;rsquo;t already, check out the examples as these are the best source of how to use Mach core. The rest of this document will describe usage in your own project/repository.
Creating a project First run zig init-exe to create your project, then add Mach as a Git submodule:
git submodule add https://github.com/hexops/mach libs/mach In your build.zig, use mach.App to define your application:
const std = @import(&amp;#34;std&amp;#34;); const mach = @import(&amp;#34;libs/mach/build.</description></item><item><title>Known issues - Mach engine</title><link>https://machengine.org/next/docs/core/known-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/docs/core/known-issues/</guid><description>Known issues If you&amp;rsquo;re trying to run the Mach examples or similar, you may be running into one of these known issues.
Windows File not found If you encounter an error like this:
Windows does not have symlinks enabled, or Git is not configured to use them. This is very annoying and has been reported to Microsoft.
Two solutions exist:
Enable symlinks in Windows: Turn on Development Mode Ensure symlinks are installed in Git git config --global core.</description></item><item><title>Mach core: standalone libraries</title><link>https://machengine.org/next/docs/core/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/docs/core/libraries/</guid><description>h2 { visibility: hidden; height: 0; margin: 0; padding: 0; } Zig gamedev libraries Separately from Mach core (and entirely optional) are a handful of useful standalone zig gamedev libraries that we provide:
gpu mach/gpu is a low level library providing a compile-time interface to the WebGPU API. Because it is a compile-time interface, it has zero-overhead.
There are multiple implementations of the interface, including:</description></item><item><title>nixOS usage - Mach engine</title><link>https://machengine.org/next/docs/core/nixos-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/docs/core/nixos-usage/</guid><description>Using Mach on nixOS If you use nixOS and want to use Mach, this document is for you.
usage via nix-ld (preferred, requires unstable) Use nix-ld following e.g. this article.
For example this shell:
with import &amp;lt;nixpkgs&amp;gt; {}; mkShell { NIX_LD_LIBRARY_PATH = lib.makeLibraryPath [ pkgs.xorg.libX11 pkgs.vulkan-loader ]; NIX_LD = lib.fileContents &amp;#34;${stdenv.cc}/nix-support/dynamic-linker&amp;#34;; shellHook = &amp;#39;&amp;#39; export LD_LIBRARY_PATH=$NIX_LD_LIBRARY_PATH &amp;#39;&amp;#39;; } Then running zig build as usual:
zig build run-textured-cube Usage via shell { pkgs ?</description></item></channel></rss>