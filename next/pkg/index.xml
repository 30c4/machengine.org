<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Standalone packages on Mach: zig game engine &amp; graphics toolkit</title><link>https://machengine.org/next/pkg/</link><description>Recent content in Standalone packages on Mach: zig game engine &amp; graphics toolkit</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://machengine.org/next/pkg/index.xml" rel="self" type="application/rss+xml"/><item><title>C packages</title><link>https://machengine.org/next/pkg/c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/c/</guid><description>C libraries &amp;amp; headers packaged via the Zig build system Mach provides an ecosystem of C libraries via the Zig package manager.
These arenâ€™t Zig bindings to these libraries (which we have separately), but instead are just forks of the actual project with their build system replaced by build.zig so you can depend on them and build them using the Zig package manager.
Pure forks with build.zig:
brotli harfbuzz freetype glfw basisu opus opusfile flac ogg Header packages:</description></item><item><title>mach-glfw</title><link>https://machengine.org/next/pkg/mach-glfw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-glfw/</guid><description>mach-glfw GitHub repository Perfected GLFW bindings for Zig, with 100% API coverage, zero-fuss installation, cross compilation, and more.
Zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support. 100% API coverage. Every function, type, constant, etc. has been exposed in a ziggified API. What does a ziggified GLFW API offer? Enums, always know what value a GLFW function can accept as everything is strictly typed. And use the nice Zig syntax to access enums, like window.</description></item></channel></rss>