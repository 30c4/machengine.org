<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Standalone packages on Mach: zig game engine &amp; graphics toolkit</title><link>https://machengine.org/next/pkg/</link><description>Recent content in Standalone packages on Mach: zig game engine &amp; graphics toolkit</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://machengine.org/next/pkg/index.xml" rel="self" type="application/rss+xml"/><item><title>C packages</title><link>https://machengine.org/next/pkg/c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/c/</guid><description>C libraries &amp;amp; headers packaged via the Zig build system Mach provides an ecosystem of C libraries via the Zig package manager.
These arenâ€™t Zig bindings to these libraries (which we have separately), but instead are just forks of the actual project with their build system replaced by build.zig so you can depend on them and build them using the Zig package manager.
Pure forks with build.zig:
brotli harfbuzz freetype glfw basisu opus opusfile flac ogg Header packages:</description></item><item><title>fastfilter</title><link>https://machengine.org/next/pkg/fastfilter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/fastfilter/</guid><description>fastfilter Binary fuse &amp;amp; xor filters for Zig (faster and smaller than bloom filters)
GitHub repository | Issue tracker Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):
.{ .name = &amp;#34;mypkg&amp;#34;, .version = &amp;#34;0.1.0&amp;#34;, .dependencies = .{ .fastfilter = .{ .url = &amp;#34;https://pkg.machengine.org/fastfilter/LATEST_COMMIT.tar.gz&amp;#34;, }, }, } Run zig build in your project, and the compiler instruct you to add a .hash = &amp;quot;...&amp;quot; field next to .</description></item><item><title>mach basisu</title><link>https://machengine.org/next/pkg/mach-basisu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-basisu/</guid><description>GitHub repository | Issue tracker basis universal (supercompressed textures) for Zig
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Status: Ready for use, but not well-tested. We are considering adding KTX2 support, and want to verify WASM compilation works.</description></item><item><title>mach dusk</title><link>https://machengine.org/next/pkg/mach-dusk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-dusk/</guid><description>GitHub repository | Issue tracker Highly experimental, blazingly fast, lean &amp;amp; mean WebGPU implementation in Zig.
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Status: Not yet ready for use, under heavy development.
Getting started Create a build.</description></item><item><title>mach earcut</title><link>https://machengine.org/next/pkg/mach-earcut/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-earcut/</guid><description>GitHub repository | Issue tracker Industrial-strength polygon triangulation for Zig
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Status: This is a port of mapbox/earcut, it should work well and matches the upstream implementation 1:1 but is not well-tested.</description></item><item><title>mach ecs</title><link>https://machengine.org/next/pkg/mach-ecs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-ecs/</guid><description>GitHub repository | Issue tracker Mach&amp;rsquo;s Entity Component System, written from first-principles and designed for deep tooling capabilities.
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Status: Not yet ready for use.
Getting started Create a build.</description></item><item><title>mach flac</title><link>https://machengine.org/next/pkg/mach-flac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-flac/</guid><description>GitHub repository | Issue tracker FLAC audio decoding and encoding for Zig via the battle-hardened xiph.org libflac
Zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support. Encoding &amp;amp; decoding support Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.</description></item><item><title>mach freetype</title><link>https://machengine.org/next/pkg/mach-freetype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-freetype/</guid><description>GitHub repository | Issue tracker Ziggified Freetype 2 bindings with zero-fuss installation, cross compilation, and more.
Zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support. Very good API coverage, almost every function, type, constant, etc. has been exposed in a ziggified API. Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):
.{ .name = &amp;#34;mypkg&amp;#34;, .version = &amp;#34;0.1.0&amp;#34;, .dependencies = .</description></item><item><title>mach gamemode</title><link>https://machengine.org/next/pkg/mach-gamemode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-gamemode/</guid><description>GitHub repository | Issue tracker Make your Linux games go brrr
Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):
.{ .name = &amp;#34;mypkg&amp;#34;, .version = &amp;#34;0.1.0&amp;#34;, .dependencies = .{ .mach_gamemode = .{ .url = &amp;#34;https://pkg.machengine.org/mach-gamemode/LATEST_COMMIT.tar.gz&amp;#34;, }, }, } Run zig build in your project, and the compiler instruct you to add a .hash = &amp;quot;...&amp;quot; field next to .url:
note: expected .hash = &amp;#34;12209838fcfb7a77d2d6931efdc7448c033a1b7dad11d082c94bbeeba9d1038cd311&amp;#34;, Then use the dependency in your build.</description></item><item><title>mach glfw</title><link>https://machengine.org/next/pkg/mach-glfw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-glfw/</guid><description>GitHub repository | Issue tracker Perfected GLFW bindings for Zig, with 100% API coverage, zero-fuss installation, cross compilation, and more.
Zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support. 100% API coverage. Every function, type, constant, etc. has been exposed in a ziggified API. What does a ziggified GLFW API offer? Enums, always know what value a GLFW function can accept as everything is strictly typed.</description></item><item><title>mach gpu</title><link>https://machengine.org/next/pkg/mach-gpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-gpu/</guid><description>GitHub repository | Issue tracker The WebGPU interface for Zig
Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):
.{ .name = &amp;#34;mypkg&amp;#34;, .version = &amp;#34;0.1.0&amp;#34;, .dependencies = .{ .mach_gpu = .{ .url = &amp;#34;https://pkg.machengine.org/mach-gpu/LATEST_COMMIT.tar.gz&amp;#34;, }, }, } Run zig build in your project, and the compiler instruct you to add a .hash = &amp;quot;...&amp;quot; field next to .url:
note: expected .hash = &amp;#34;12209838fcfb7a77d2d6931efdc7448c033a1b7dad11d082c94bbeeba9d1038cd311&amp;#34;, Then use the dependency in your build.</description></item><item><title>mach gpu-dawn</title><link>https://machengine.org/next/pkg/mach-gpu-dawn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-gpu-dawn/</guid><description>GitHub repository | Issue tracker Google&amp;rsquo;s Dawn WebGPU implementation, cross-compiled with Zig into a single static library
Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):
.{ .name = &amp;#34;mypkg&amp;#34;, .version = &amp;#34;0.1.0&amp;#34;, .dependencies = .{ .mach_gpu_dawn = .{ .url = &amp;#34;https://pkg.machengine.org/mach-gpu-dawn/LATEST_COMMIT.tar.gz&amp;#34;, }, }, } Run zig build in your project, and the compiler instruct you to add a .hash = &amp;quot;...&amp;quot; field next to .</description></item><item><title>mach model3d</title><link>https://machengine.org/next/pkg/mach-model3d/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-model3d/</guid><description>GitHub repository | Issue tracker Compact, featureful model format &amp;amp; alternative to glTF.
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Status: Ready for use, but docs are not great. We&amp;rsquo;re considering if model3d is the right format for Mach.</description></item><item><title>mach opus</title><link>https://machengine.org/next/pkg/mach-opus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-opus/</guid><description>GitHub repository | Issue tracker Opus audio decoding and encoding for Zig via the battle-hardened xiph.org libopus
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Status: Ready for use, but docs are not great. We&amp;rsquo;re considering if opus is the right format for Mach.</description></item><item><title>mach sysaudio</title><link>https://machengine.org/next/pkg/mach-sysaudio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-sysaudio/</guid><description>GitHub repository | Issue tracker Truly cross-platform, low-level, audio IO in Zig - input and output with minimal latency and a friendly API.
Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):
.{ .name = &amp;#34;mypkg&amp;#34;, .version = &amp;#34;0.1.0&amp;#34;, .dependencies = .{ .mach_sysaudio = .{ .url = &amp;#34;https://pkg.machengine.org/mach-sysaudio/LATEST_COMMIT.tar.gz&amp;#34;, }, }, } Run zig build in your project, and the compiler instruct you to add a .</description></item><item><title>mach sysjs</title><link>https://machengine.org/next/pkg/mach-sysjs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/mach-sysjs/</guid><description>GitHub repository | Issue tracker Enables Zig &amp;lt;-&amp;gt; JS interoperability via code generation, with complex type support.
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Status: Not yet ready for use, undergoing a major rewrite.
Getting started Create a build.</description></item></channel></rss>