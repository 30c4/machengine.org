<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About the project on Mach engine - game engine &amp; graphics toolkit for the future</title><link>https://machengine.org/next/about/</link><description>Recent content in About the project on Mach engine - game engine &amp; graphics toolkit for the future</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://machengine.org/next/about/index.xml" rel="self" type="application/rss+xml"/><item><title>Known issues - Mach engine</title><link>https://machengine.org/next/about/known-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/known-issues/</guid><description>Known issues If you&amp;rsquo;re trying to run the Mach examples or similar, you may be running into one of these known issues.
nixOS If you are using nixOS, we have tips on how to use Mach with it here.
Windows File not found If you encounter an error like this:
Windows does not have symlinks enabled, or Git is not configured to use them. This is very annoying and has been reported to Microsoft.</description></item><item><title>nixOS usage - Mach engine</title><link>https://machengine.org/next/about/nixos-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/nixos-usage/</guid><description>Using Mach on nixOS If you use nixOS and want to use Mach, this document is for you.
usage via nix-ld (preferred, requires unstable) Use nix-ld following e.g. this article.
For example this shell:
with import &amp;lt;nixpkgs&amp;gt; {}; mkShell { NIX_LD_LIBRARY_PATH = lib.makeLibraryPath [ pkgs.xorg.libX11 pkgs.vulkan-loader ]; NIX_LD = lib.fileContents &amp;#34;${stdenv.cc}/nix-support/dynamic-linker&amp;#34;; shellHook = &amp;#39;&amp;#39; export LD_LIBRARY_PATH=$NIX_LD_LIBRARY_PATH &amp;#39;&amp;#39;; } Then running zig build as usual:
zig build run-textured-cube Usage via shell { pkgs ?</description></item><item><title>Platform support - Mach engine</title><link>https://machengine.org/next/about/platforms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/platforms/</guid><description>Supported Zig versions All of Mach is tested with this Zig version, which is usually (but not always) the latest Zig nightly version. Sometimes newer versions will work, older versions almost never work due to occassional minor changes in the Zig standard library APIs.
Platform support We aim to support a broad array of operating systems and architectures, as long as they are reasonably used by desktop/mobile consumers, or someone would like to contribute and maintain support for them.</description></item><item><title>Project goals - Mach engine</title><link>https://machengine.org/next/about/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/goals/</guid><description>Mach project goals For the goals of our engine itself (i.e. how we see the process of game development changing), please see the Mach engine overview.
This page covers more broad project goals that apply to all Mach projects, code, standalone libraries, etc.
Zero-fuss installation All too often we see people get a sudden burst of inspiration: "I'm going to finally start my game/app this weekend!" only to see them utlimately get bogged down by setting up their dev environment, ending their weekend with "</description></item></channel></rss>