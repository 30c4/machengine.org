<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mach on Mach: zig game engine &amp; graphics toolkit</title><link>https://machengine.org/next/</link><description>Recent content in Mach on Mach: zig game engine &amp; graphics toolkit</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://machengine.org/next/index.xml" rel="self" type="application/rss+xml"/><item><title>C packages</title><link>https://machengine.org/next/pkg/c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/pkg/c/</guid><description>C libraries &amp;amp; headers packaged via the Zig build system Mach provides an ecosystem of C libraries via the Zig package manager.
These arenâ€™t Zig bindings to these libraries (which we have separately), but instead are just forks of the actual project with their build system replaced by build.zig so you can depend on them and build them using the Zig package manager.
Pure forks with build.zig:
brotli harfbuzz freetype glfw basisu opus opusfile flac ogg Header packages:</description></item><item><title>Coordinate system</title><link>https://machengine.org/next/engine/math/coordinate-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/engine/math/coordinate-system/</guid><description>Coordinate system (+Y up, left-handed) Normalized Device coordinates: +Y up; (-1, -1) is at the bottom-left corner. Framebuffer coordinates: +Y down; (0, 0) is at the top-left corner. Texture coordinates: +Y down; (0, 0) is at the top-left corner. Diagrams (placeholder image) Why? You can use other coordinate systems if you need to, of course, by converting between them - but it intentionally won&amp;rsquo;t be as convienient to use with mach-math.</description></item><item><title>Core examples</title><link>https://machengine.org/next/core/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/core/examples/</guid><description>Mach core examples All examples require this Zig nightly version | known issues advanced-gen-texture-light example Generates a brick texture at comptime, uses Blinn-Phong lighting, and several pipelines. Move camera with arrow keys / WASD.
git clone --recursive https://github.com/hexops/mach-core cd mach-core/ zig build run-advanced-gen-texture-light ~770 lines of code textured-cube example Loads a PNG image and uploads the texture to the GPU. Renders it on a 3D cube.
git clone --recursive https://github.</description></item><item><title>Discord community</title><link>https://machengine.org/next/discord/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/discord/</guid><description>Redirecting you to https://discord.gg/XNG3NZgCqp</description></item><item><title>Getting started</title><link>https://machengine.org/next/core/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/core/getting-started/</guid><description>Getting Started with Mach core Here you will learn how to use mach-core in your own project/repository. If you haven&amp;rsquo;t already, check out the examples as those describe how to actually use Mach core&amp;rsquo;s APIs, this page just describes project setup.
Mach is now using the Zig package manager Note: Mach has recently been updated to make use of the experimental Zig package manager, although it cannot yet be used for all our dependencies due to some bugs with it.</description></item><item><title>GPU error handling</title><link>https://machengine.org/next/engine/gpu/errors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/engine/gpu/errors/</guid><description>GPU error handling Asynchronous nature GPUs have largely asynchronous APIs: you build up a command buffer which encodes a number of commands instructing the GPU to do something, and then you ask the GPU to execute that buffer of commands. As a result, errors must be handled asynchronously as well. try isn&amp;rsquo;t going to work here.
Error scopes WebGPU has a concept of error scopes, you can push an error scope onto the stack and pop an error scope.</description></item><item><title>GPU memory management</title><link>https://machengine.org/next/engine/gpu/memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/engine/gpu/memory/</guid><description>GPU memory management Reference counting GPU objects like gpu.Texture, gpu.Buffer, or any other object which has a .reference, .release and .destroy method - use reference counting.
Although we love explicit memory management, GPU memory is perhaps one of the best use-cases for reference counting. All WebGPU objects are reference counted, and it&amp;rsquo;s not just because it originated as a browser API.
Guidance Use .reference() and .release() to release memory of objects.</description></item><item><title>Known issues</title><link>https://machengine.org/next/about/known-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/known-issues/</guid><description>Known issues If you&amp;rsquo;re trying to run the Mach examples or similar, you may be running into one of these known issues.
nixOS If you are using nixOS, we have tips on how to use Mach with it here.
Windows File not found If you encounter an error like this:
Windows does not have symlinks enabled, or Git is not configured to use them. This is very annoying and has been reported to Microsoft.</description></item><item><title>mach-gpu: the gpu.Interface for Zig</title><link>https://machengine.org/next/gpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/gpu/</guid><description>This page has moved: Mach core examples</description></item><item><title>Matrix storage</title><link>https://machengine.org/next/engine/math/matrix-storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/engine/math/matrix-storage/</guid><description>Matrix storage Matrices in Mach use:
Column-major matrix storage Column-vectors (i.e. right-associative multiplication, matrix * vector = vector) The benefit of using this &amp;ldquo;OpenGL-style&amp;rdquo; matrix is that it matches the conventions accepted by the scientific community, it&amp;rsquo;s what you&amp;rsquo;ll find in linear algebra textbooks. It also matches WebGPU, Vulkan, Unity3D, etc. It does NOT match DirectX-style which e.g. Unreal Engine uses.
Note: many people will say &amp;ldquo;row major&amp;rdquo; or &amp;ldquo;column major&amp;rdquo; and implicitly mean three or more different concepts; to avoid confusion we&amp;rsquo;ll go over this in more depth below.</description></item><item><title>Migration notes</title><link>https://machengine.org/next/core/migrations/2023-core-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/core/migrations/2023-core-api/</guid><description>mach-core: v0.2 API redesign Mach v0.2 brought a complete redesign of the mach-core API. To upgrade your application, see the notes below.
See also the migration notes page.
Updating your application Previously, a complete Mach Core application looked something like this:
pub const App = @This(); pub fn init(app: *App, core: *mach.Core) !void { // ... } pub fn deinit(_: *App, _: *mach.Core) void {} pub fn update(app: *App, core: *mach.</description></item><item><title>nixOS usage</title><link>https://machengine.org/next/about/nixos-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/nixos-usage/</guid><description>Using Mach on nixOS If you use nixOS and want to use Mach, this document is for you.
usage via nix-ld (preferred, requires unstable) Use nix-ld following e.g. this article.
For example this shell:
with import &amp;lt;nixpkgs&amp;gt; {}; mkShell { NIX_LD_LIBRARY_PATH = lib.makeLibraryPath [ pkgs.xorg.libX11 pkgs.vulkan-loader ]; NIX_LD = lib.fileContents &amp;#34;${stdenv.cc}/nix-support/dynamic-linker&amp;#34;; shellHook = &amp;#39;&amp;#39; export LD_LIBRARY_PATH=$NIX_LD_LIBRARY_PATH &amp;#39;&amp;#39;; } Then running zig build as usual:
zig build run-textured-cube Usage via shell { pkgs ?</description></item><item><title>Platform support</title><link>https://machengine.org/next/about/platforms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/platforms/</guid><description>Supported Zig versions All of Mach is tested with this Zig version, which is usually (but not always) the latest Zig nightly version. Sometimes newer versions will work, older versions almost never work due to occassional minor changes in the Zig standard library APIs.
Platform support We aim to support a broad array of operating systems and architectures, as long as they are reasonably used by desktop/mobile consumers, or someone would like to contribute and maintain support for them.</description></item><item><title>Project goals</title><link>https://machengine.org/next/about/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/goals/</guid><description>Mach project goals For the goals of our engine itself (i.e. how we see the process of game development changing), please see the Mach engine overview.
This page covers more broad project goals that apply to all Mach projects, code, standalone libraries, etc.
Zero-fuss installation All too often we see people get a sudden burst of inspiration: "I'm going to finally start my game/app this weekend!" only to see them utlimately get bogged down by setting up their dev environment, ending their weekend with "</description></item><item><title>Stability</title><link>https://machengine.org/next/about/stability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/stability/</guid><description>What stability means to us We haven&amp;rsquo;t reached Mach 1 yet, but Mach encompasses many projects and some are more stable than others.
Area Stability Notes Engine Experimental We expect many things to change before Mach 1. Core Stable We expect some API breaking changes as we add support for more platforms, add small features, etc. Packages - Depends on the package, experimental packages will have a clear warning in the README.</description></item></channel></rss>