<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mach on Mach engine - game engine &amp; graphics toolkit for the future</title><link>https://machengine.org/next/</link><description>Recent content in Mach on Mach engine - game engine &amp; graphics toolkit for the future</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://machengine.org/next/index.xml" rel="self" type="application/rss+xml"/><item><title>A simple page!</title><link>https://machengine.org/next/simple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/simple/</guid><description>Hello&amp;hellip;&amp;hellip;.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Tincidunt eget nullam non nisi. Facilisi cras fermentum odio eu feugiat. Bibendum arcu vitae elementum curabitur vitae nunc sed velit dignissim. Arcu dictum varius duis at consectetur lorem donec. Adipiscing vitae proin sagittis nisl rhoncus mattis rhoncus urna. Ullamcorper dignissim cras tincidunt lobortis feugiat. Nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus.</description></item><item><title>Examples - Mach core</title><link>https://machengine.org/next/core/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/core/examples/</guid><description>.p-section { display: flex; flex-direction: row; margin-top: 3rem; align-items: center; justify-content: center; } .p-section-highlight { margin-top: 4rem; margin-bottom: 2rem; } .p-section-right { margin-left: 2rem; } .p-section-left { margin-right: 2rem; } .p-img-left { height: 10rem; margin-left: 4.5rem; } .p-img-right { height: 10rem; margin-right: 4.5rem; } .p-logo { margin-right: 3rem; margin-top: 2rem; } .p-logoimg { height: 10rem; width: 100%; } h2 { text-align: left; margin-top: 0; } pre { max-width: 25rem; font-size: 12px; } @media (max-width:700px) { .</description></item><item><title>Experimental libraries - Mach</title><link>https://machengine.org/next/libs/experimental/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/libs/experimental/</guid><description>Experimental Zig gamedev libraries The following libraries are experimental. Some are not usable yet/we expect their APIs to change substantially, while others are near promotion to being declared stable but have a few caveats.
While libraries are unstable, they live in the Mach monorepo. Once declared stable they will be exported to a separate standalone repository.
mach/sysaudio mach/sysaudio is a lightweight and cross-platform abstraction over various sound drivers, providing input and output.</description></item><item><title>Getting started - Mach core</title><link>https://machengine.org/next/core/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/core/getting-started/</guid><description>Getting Started with Mach core If you haven&amp;rsquo;t already, check out the examples as these are the best source of how to use Mach core. The rest of this document will describe usage in your own project/repository.
Creating a project First run zig init-exe to create your project, then add Mach as a Git submodule:
git submodule add https://github.com/hexops/mach libs/mach In your build.zig, use mach.App to define your application:
const std = @import(&amp;#34;std&amp;#34;); const mach = @import(&amp;#34;libs/mach/build.</description></item><item><title>Known issues - Mach engine</title><link>https://machengine.org/next/about/known-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/known-issues/</guid><description>Known issues If you&amp;rsquo;re trying to run the Mach examples or similar, you may be running into one of these known issues.
nixOS If you are using nixOS, we have tips on how to use Mach with it here.
Windows File not found If you encounter an error like this:
Windows does not have symlinks enabled, or Git is not configured to use them. This is very annoying and has been reported to Microsoft.</description></item><item><title>Mach Discord community</title><link>https://machengine.org/next/discord/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/discord/</guid><description>Redirecting you to https://discord.gg/XNG3NZgCqp
location.href = 'https://discord.gg/XNG3NZgCqp';</description></item><item><title>Mach engine: a game engine for the future</title><link>https://machengine.org/next/engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/engine/</guid><description>Mach engine: game engine &amp;amp; graphics toolkit Competitive in spirit with other engines We’re planning a fully-fledged set of deeply integrated tools, a proper editor, the whole deal-we’re not kidding around here. Coming soon We're realistic in that we are a fair amount of time away from this being reality. We only want to speak once we really have something to show you that we know you'll love - so please wait to hear our voice.</description></item><item><title>mach/freetype: Ziggified FreeType 2 bindings</title><link>https://machengine.org/next/libs/freetype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/libs/freetype/</guid><description>Ziggified FreeType 2 bindings As with all Mach libraries, zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support is guaranteed. Quick links: mach/freetype on GitHub Features Builds all of FreeType (and dependencies if needed) from source, featuring:
99% FreeType 2 core API coverage. (optional) HarfBuzz bindings, which is critical for proper Unicode rendering. (optional) brotli support for woff2 fonts (optional) external zlib linkage Examples Two examples are provided:</description></item><item><title>mach/glfw: perfected GLFW bindings for Zig</title><link>https://machengine.org/next/libs/glfw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/libs/glfw/</guid><description>Perfected GLFW bindings for Zig As with all Mach libraries, zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support is guaranteed. Quick links: mach/glfw on GitHub Perfecting GLFW for Zig (article) Features 100% API coverage, 130+ tests, etc. mach/glfw bindings have 100% API coverage of GLFW v3.3.4. Every function, type, constant, etc. has been wrapped in a ziggified API.</description></item><item><title>mach/gpu: the gpu.Interface for Zig</title><link>https://machengine.org/next/gpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/gpu/</guid><description>This page has moved: Mach core examples
location.href = '../core/examples';</description></item><item><title>mach/gpu: the WebGPU interface for Zig</title><link>https://machengine.org/next/libs/gpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/libs/gpu/</guid><description>The WebGPU interface for Zig As with all Mach libraries, zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support is guaranteed. Quick links: mach/gpu on GitHub Perfecting WebGPU/Dawn native graphics for Zig (article) Perfecting The future of graphics with Zig (article) Goals Allow comptime-defined interception of WebGPU API requests (comptime interfaces.) Expose a standard Dawn webgpu.h-compliant C ABI, which routes through Zig comptime interfaces.</description></item><item><title>Migration notes - Mach core v0.2 API redesign</title><link>https://machengine.org/next/core/migrations/2023-core-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/core/migrations/2023-core-api/</guid><description>mach/core: v0.2 API redesign Mach v0.2 brought a complete redesign of the mach/core API. To upgrade your application, see the notes below.
See also the migration notes page.
Updating your application Previously, a complete Mach Core application looked something like this:
pub const App = @This(); pub fn init(app: *App, core: *mach.Core) !void { // ... } pub fn deinit(_: *App, _: *mach.Core) void {} pub fn update(app: *App, core: *mach.</description></item><item><title>nixOS usage - Mach engine</title><link>https://machengine.org/next/core/nixos-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/core/nixos-usage/</guid><description>Using Mach on nixOS If you use nixOS and want to use Mach, this document is for you.
usage via nix-ld (preferred, requires unstable) Use nix-ld following e.g. this article.
For example this shell:
with import &amp;lt;nixpkgs&amp;gt; {}; mkShell { NIX_LD_LIBRARY_PATH = lib.makeLibraryPath [ pkgs.xorg.libX11 pkgs.vulkan-loader ]; NIX_LD = lib.fileContents &amp;#34;${stdenv.cc}/nix-support/dynamic-linker&amp;#34;; shellHook = &amp;#39;&amp;#39; export LD_LIBRARY_PATH=$NIX_LD_LIBRARY_PATH &amp;#39;&amp;#39;; } Then running zig build as usual:
zig build run-textured-cube Usage via shell { pkgs ?</description></item><item><title>Platform support - Mach engine</title><link>https://machengine.org/next/about/platforms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/platforms/</guid><description>Supported Zig versions All of Mach is tested with this Zig version, which is usually (but not always) the latest Zig nightly version. Sometimes newer versions will work, older versions almost never work due to occassional minor changes in the Zig standard library APIs.
Platform support We aim to support a broad array of operating systems and architectures, as long as they are reasonably used by desktop/mobile consumers, or someone would like to contribute and maintain support for them.</description></item><item><title>Project goals - Mach engine</title><link>https://machengine.org/next/about/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/next/about/goals/</guid><description>Mach project goals For the goals of our engine itself (i.e. how we see the process of game development changing), please see the Mach engine overview.
This page covers more broad project goals that apply to all Mach projects, code, standalone libraries, etc.
Zero-fuss installation All too often we see people get a sudden burst of inspiration: "I'm going to finally start my game/app this weekend!" only to see them utlimately get bogged down by setting up their dev environment, ending their weekend with "</description></item></channel></rss>